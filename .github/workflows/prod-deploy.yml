name: Production Pipeline

on:
  push:
    tags: 
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag to deploy'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  K8S_ENVIRONMENT: prod
  NAMESPACE: fintech-prod

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
          registry-url: 'https://verdaccio.liontechsolution.com/'

      - name: Install ESLint dependencies only
        run: |
          npm install --no-save eslint @typescript-eslint/eslint-plugin @typescript-eslint/parser typescript
          cp -r node_modules node_modules_eslint

      - name: Lint code
        run: npm run lint
        
      - name: Install full dependencies
        run: npm ci

  test:
    needs: validate
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: admin123
          MONGO_INITDB_DATABASE: fintech_test
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      rabbitmq:
        image: rabbitmq:3.12-management
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd="rabbitmq-diagnostics -q ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
          registry-url: 'https://verdaccio.liontechsolution.com/'

      - name: Install dependencies
        run: npm ci

      - name: Wait for services
        run: |
          echo "Waiting for MongoDB..."
          timeout 60 sh -c 'until nc -z localhost 27017; do sleep 1; done'
          echo "Waiting for RabbitMQ..."
          timeout 60 sh -c 'until nc -z localhost 5672; do sleep 1; done'
          sleep 5

      - name: Build TypeScript
        run: npm run build

      - name: Run comprehensive tests
        run: npm test -- --coverage --coverageReporters=text-lcov --maxWorkers=2
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://admin:admin123@localhost:27017/fintech_test?authSource=admin
          RABBITMQ_URL: amqp://guest:guest@localhost:5672
          RABBITMQ_EXCHANGE: test-file-upload-exchange
          RABBITMQ_QUEUE: test-file-import-queue
          RABBITMQ_ROUTING_KEY: file.uploaded
          DELETE_AFTER_PROCESSING: false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-production

  security-scan:
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run security audit
        run: npm audit --audit-level high

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build-and-push:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.imagetag.outputs.IMAGE_TAG }}
      VERSION: ${{ steps.version.outputs.VERSION }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
          registry-url: 'https://verdaccio.liontechsolution.com/'

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - name: Set up QEMU for multi-architecture builds
        uses: docker/setup-qemu-action@v3
        with:
          platforms: 'arm64,amd64'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate image tags
        id: imagetag
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          echo "IMAGE_TAG=${VERSION}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${VERSION}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ env.IMAGE_TAG }}
            org.opencontainers.image.title=fintech-personal-data-import
            org.opencontainers.image.description=Microservicio para importaci√≥n de datos financieros
            org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.documentation=${{ github.server_url }}/${{ github.repository }}/blob/main/README.md
          cache-from: type=gha
          cache-to: type=gha,mode=max

  vulnerability-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.IMAGE_TAG }}'
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'

  create-release:
    needs: [build-and-push, vulnerability-scan]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.build-and-push.outputs.VERSION }}
          release_name: Release ${{ needs.build-and-push.outputs.VERSION }}
          body: |
            ## Changes in this Release
            
            **Production Release** of fintech-personal-data-import
            
            ### Docker Image
            ```
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.IMAGE_TAG }}
            ```
            
            ### Features
            - Data import microservice for financial data processing
            - Support for CSV and Excel file formats
            - MongoDB GridFS integration for file storage
            - RabbitMQ integration for asynchronous processing
            - Auto-delete functionality for processed files
            
            ### Security
            - Security vulnerabilities scanned
            - Container image scanned with Trivy
            - Dependencies audited
            
            For detailed usage instructions, see [USAGE.md](./USAGE.md)
          draft: false
          prerelease: false

  update-argocd-prod:
    needs: [build-and-push, create-release]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout ArgoCD repository
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository_owner }}/fintech-argocd-config
          token: ${{ secrets.ARGOCD_REPO_TOKEN }}
          path: argocd-config

      - name: Update production image tag
        run: |
          cd argocd-config
          IMAGE_TAG=${{ needs.build-and-push.outputs.IMAGE_TAG }}
          
          # Update the image tag in the production overlay
          if [ -f "overlays/prod/fintech-personal-data-import/kustomization.yaml" ]; then
            sed -i "s|newTag:.*|newTag: ${IMAGE_TAG}|g" overlays/prod/fintech-personal-data-import/kustomization.yaml
          elif [ -f "environments/prod/fintech-personal-data-import/values.yaml" ]; then
            sed -i "s|tag:.*|tag: ${IMAGE_TAG}|g" environments/prod/fintech-personal-data-import/values.yaml
          fi
          
          # Commit and push changes
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Deploy fintech-personal-data-import ${IMAGE_TAG} to production" || exit 0
          git push

      - name: Create deployment notification
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const version = '${{ needs.build-and-push.outputs.VERSION }}';
            
            await github.rest.repos.createDeployment({
              owner,
              repo,
              ref: version,
              environment: 'production',
              description: `Deploy ${version} to production`,
              auto_merge: false,
              required_contexts: []
            });
